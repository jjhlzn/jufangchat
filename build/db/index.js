"use strict";
var console = require('console');
var sql = require('mssql');
var redis = require("redis");
var dbUrl = '';
var redisUrl = '';
if (process.env.NODE_ENV == 'production') {
    //production 使用内网地址
    dbUrl = '10.45.52.93';
    redisUrl = '10.45.52.93';
}
else {
    dbUrl = 'jf.yhkamani.com';
    redisUrl = 'jf.yhkamani.com';
}
//数据库配置信息
var config = {
    user: 'jf',
    password: '#Jufang2016!@#',
    server: dbUrl,
    port: 9433,
    database: 'Jufang',
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000
    }
};
var redisConfig = {
    detect_buffers: true,
    host: redisUrl,
    port: 7777,
    retry_strategy: function (options) {
        if (options.error.code === 'ECONNREFUSED') {
            // End reconnecting on a specific error and flush all commands with a individual error
            return new Error('The server refused the connection');
        }
        if (options.total_retry_time > 1000 * 60 * 60) {
            // End reconnecting after a specific timeout and flush all commands with a individual error
            return new Error('Retry time exhausted');
        }
        if (options.times_connected > 10) {
            // End reconnecting with built in error
            return undefined;
        }
        // reconnect after
        return Math.max(options.attempt * 100, 3000);
    }
};
function get_connection() {
    //conn.on('error', function(err){console.log(err);});
    //console.log('connect = ' + sql.connect(config));
    var conn = sql.connect(config);
    return conn;
}
exports.get_connection = get_connection;
function get_request() {
    var request = new sql.Request();
    request.on('error', function (err) {
        console.error("error: ", err);
    });
    return request;
}
exports.get_request = get_request;
;
function get_redis_client() {
    return redis.createClient(redisConfig);
}
exports.get_redis_client = get_redis_client;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QkFBZ0IsbUJBRS9CLENBQUEiLCJmaWxlIjoiZGIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgKiBhcyBjb25zb2xlIGZyb20gJ2NvbnNvbGUnO1xuY29uc3Qgc3FsID0gcmVxdWlyZSgnbXNzcWwnKTtcbmNvbnN0IHJlZGlzID0gcmVxdWlyZShcInJlZGlzXCIpO1xuXG52YXIgZGJVcmwgPSAnJztcbnZhciByZWRpc1VybCA9ICcnO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vcHJvZHVjdGlvbiDkvb/nlKjlhoXnvZHlnLDlnYBcbiAgICBkYlVybCA9ICcxMC40NS41Mi45Myc7XG4gICAgcmVkaXNVcmwgPSAnMTAuNDUuNTIuOTMnO1xufSBlbHNlIHtcbiAgICBkYlVybCA9ICdqZi55aGthbWFuaS5jb20nO1xuICAgIHJlZGlzVXJsID0gJ2pmLnloa2FtYW5pLmNvbSc7XG59XG5cbi8v5pWw5o2u5bqT6YWN572u5L+h5oGvXG52YXIgY29uZmlnID0ge1xuICAgIHVzZXI6ICdqZicsXG4gICAgcGFzc3dvcmQ6ICcjSnVmYW5nMjAxNiFAIycsXG4gICAgc2VydmVyOiBkYlVybCwgLy8gWW91IGNhbiB1c2UgJ2xvY2FsaG9zdFxcXFxpbnN0YW5jZScgdG8gY29ubmVjdCB0byBuYW1lZCBpbnN0YW5jZVxuICAgIHBvcnQ6IDk0MzMsXG4gICAgZGF0YWJhc2U6ICdKdWZhbmcnLFxuICAgIHBvb2w6IHtcbiAgICAgICAgbWF4OiAxMCxcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBpZGxlVGltZW91dE1pbGxpczogMzAwMDBcbiAgICB9XG59O1xuXG52YXIgcmVkaXNDb25maWcgPSB7XG4gICAgZGV0ZWN0X2J1ZmZlcnM6IHRydWUsIFxuICAgIGhvc3Q6IHJlZGlzVXJsLCBcbiAgICBwb3J0OiA3Nzc3LFxuICAgIHJldHJ5X3N0cmF0ZWd5OiBmdW5jdGlvbiAob3B0aW9ucyk6IGFueSB7XG4gICAgICAgIGlmIChvcHRpb25zLmVycm9yLmNvZGUgPT09ICdFQ09OTlJFRlVTRUQnKSB7XG4gICAgICAgICAgICAvLyBFbmQgcmVjb25uZWN0aW5nIG9uIGEgc3BlY2lmaWMgZXJyb3IgYW5kIGZsdXNoIGFsbCBjb21tYW5kcyB3aXRoIGEgaW5kaXZpZHVhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignVGhlIHNlcnZlciByZWZ1c2VkIHRoZSBjb25uZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudG90YWxfcmV0cnlfdGltZSA+IDEwMDAgKiA2MCAqIDYwKSB7XG4gICAgICAgICAgICAvLyBFbmQgcmVjb25uZWN0aW5nIGFmdGVyIGEgc3BlY2lmaWMgdGltZW91dCBhbmQgZmx1c2ggYWxsIGNvbW1hbmRzIHdpdGggYSBpbmRpdmlkdWFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXRyeSB0aW1lIGV4aGF1c3RlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRpbWVzX2Nvbm5lY3RlZCA+IDEwKSB7XG4gICAgICAgICAgICAvLyBFbmQgcmVjb25uZWN0aW5nIHdpdGggYnVpbHQgaW4gZXJyb3JcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVjb25uZWN0IGFmdGVyXG4gICAgICAgIHJldHVybiBNYXRoLm1heChvcHRpb25zLmF0dGVtcHQgKiAxMDAsIDMwMDApO1xuICAgIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfY29ubmVjdGlvbigpIHtcbiAgICAvL2Nvbm4ub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKXtjb25zb2xlLmxvZyhlcnIpO30pO1xuICAgIC8vY29uc29sZS5sb2coJ2Nvbm5lY3QgPSAnICsgc3FsLmNvbm5lY3QoY29uZmlnKSk7XG4gICAgY29uc3QgY29ubiA9ICBzcWwuY29ubmVjdChjb25maWcpO1xuICAgXG4gICAgcmV0dXJuIGNvbm47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfcmVxdWVzdCgpIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IHNxbC5SZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpe1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiZXJyb3I6IFwiLCBlcnIpO1xuICAgIH0pXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3JlZGlzX2NsaWVudCgpIHtcbiAgICByZXR1cm4gcmVkaXMuY3JlYXRlQ2xpZW50KHJlZGlzQ29uZmlnKTtcbn0iXX0=
